//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public FloatValueComponent floatValue { get { return (FloatValueComponent)GetComponent(GameComponentsLookup.FloatValue); } }
    public bool hasFloatValue { get { return HasComponent(GameComponentsLookup.FloatValue); } }

    public void AddFloatValue(float newValue) {
        var index = GameComponentsLookup.FloatValue;
        var component = (FloatValueComponent)CreateComponent(index, typeof(FloatValueComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceFloatValue(float newValue) {
        var index = GameComponentsLookup.FloatValue;
        var component = (FloatValueComponent)CreateComponent(index, typeof(FloatValueComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveFloatValue() {
        RemoveComponent(GameComponentsLookup.FloatValue);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherFloatValue;

    public static Entitas.IMatcher<GameEntity> FloatValue {
        get {
            if (_matcherFloatValue == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.FloatValue);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherFloatValue = matcher;
            }

            return _matcherFloatValue;
        }
    }
}
