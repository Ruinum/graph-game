//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ConfigIndexComponent configIndex { get { return (ConfigIndexComponent)GetComponent(GameComponentsLookup.ConfigIndex); } }
    public bool hasConfigIndex { get { return HasComponent(GameComponentsLookup.ConfigIndex); } }

    public void AddConfigIndex(uint newValue, int newEntityIdentity) {
        var index = GameComponentsLookup.ConfigIndex;
        var component = (ConfigIndexComponent)CreateComponent(index, typeof(ConfigIndexComponent));
        component.Value = newValue;
        component.EntityIdentity = newEntityIdentity;
        AddComponent(index, component);
    }

    public void ReplaceConfigIndex(uint newValue, int newEntityIdentity) {
        var index = GameComponentsLookup.ConfigIndex;
        var component = (ConfigIndexComponent)CreateComponent(index, typeof(ConfigIndexComponent));
        component.Value = newValue;
        component.EntityIdentity = newEntityIdentity;
        ReplaceComponent(index, component);
    }

    public void RemoveConfigIndex() {
        RemoveComponent(GameComponentsLookup.ConfigIndex);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherConfigIndex;

    public static Entitas.IMatcher<GameEntity> ConfigIndex {
        get {
            if (_matcherConfigIndex == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ConfigIndex);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherConfigIndex = matcher;
            }

            return _matcherConfigIndex;
        }
    }
}
