//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity servicesEntity { get { return GetGroup(GameMatcher.Services).GetSingleEntity(); } }
    public ServicesComponent services { get { return servicesEntity.services; } }
    public bool hasServices { get { return servicesEntity != null; } }

    public GameEntity SetServices(Ruinum.ECS.Services.Interfaces.IGameServices newInstance) {
        if (hasServices) {
            throw new Entitas.EntitasException("Could not set Services!\n" + this + " already has an entity with ServicesComponent!",
                "You should check if the context already has a servicesEntity before setting it or use context.ReplaceServices().");
        }
        var entity = CreateEntity();
        entity.AddServices(newInstance);
        return entity;
    }

    public void ReplaceServices(Ruinum.ECS.Services.Interfaces.IGameServices newInstance) {
        var entity = servicesEntity;
        if (entity == null) {
            entity = SetServices(newInstance);
        } else {
            entity.ReplaceServices(newInstance);
        }
    }

    public void RemoveServices() {
        servicesEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ServicesComponent services { get { return (ServicesComponent)GetComponent(GameComponentsLookup.Services); } }
    public bool hasServices { get { return HasComponent(GameComponentsLookup.Services); } }

    public void AddServices(Ruinum.ECS.Services.Interfaces.IGameServices newInstance) {
        var index = GameComponentsLookup.Services;
        var component = (ServicesComponent)CreateComponent(index, typeof(ServicesComponent));
        component.Instance = newInstance;
        AddComponent(index, component);
    }

    public void ReplaceServices(Ruinum.ECS.Services.Interfaces.IGameServices newInstance) {
        var index = GameComponentsLookup.Services;
        var component = (ServicesComponent)CreateComponent(index, typeof(ServicesComponent));
        component.Instance = newInstance;
        ReplaceComponent(index, component);
    }

    public void RemoveServices() {
        RemoveComponent(GameComponentsLookup.Services);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherServices;

    public static Entitas.IMatcher<GameEntity> Services {
        get {
            if (_matcherServices == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Services);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherServices = matcher;
            }

            return _matcherServices;
        }
    }
}
